import { useLocation, useNavigate } from 'react-router-dom'
import { Button, Form, Input, Radio, Checkbox } from 'antd'
import { useState } from 'react'
import { sendOrderToTelegram } from '../components/utils/sendTelegram'
import { useDispatch } from 'react-redux'
import { removeManyByIndexes } from '../store/cartSlice'
import BackButton from "../components/utils/BackButton"

import dayjs from 'dayjs'

const CheckoutPage = () => {
  const { state } = useLocation()
  const navigate = useNavigate()
  const selectedItems = state?.selectedItems || []
  const selectedIndexes = state?.selectedIndexes || []
  const [method, setMethod] = useState<'pickup' | 'delivery'>('pickup')
  const [form] = Form.useForm()
  const dispatch = useDispatch()

  const sendEmailCopy = Form.useWatch('sendEmailCopy', form)

  const agreementAccepted = Form.useWatch('agreement', form)

  const handleSubmit = async (values: any) => {
    const now = dayjs().format('DD.MM.YYYY HH:mm')

    const orderMessage = `
      üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑* (${now})
      üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${values.phone || '‚Äî'}
      üí¨ Telegram: ${values.telegram}
      üì¶ –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: ${method === 'pickup' ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : '–î–æ—Å—Ç–∞–≤–∫–∞'}
      ${method === 'delivery' ? `üè† –ê–¥—Ä–µ—Å: ${values.address}` : ''}

      üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${values.comment || '‚Äî'}

      üìã –¢–æ–≤–∞—Ä—ã:
      ${selectedItems.map((item: any, i: number) => `  ${i + 1}. ${item.brand} ‚Äî SPH: ${item.sph}`).join('\n')}
          `.trim()

    try {
      await sendOrderToTelegram(orderMessage)

      if (values.sendCopy && values.telegram?.startsWith('@')) {
        const userChatId = values.telegram.trim().replace('@', '')
        await sendOrderToTelegram(orderMessage, userChatId)
      }

    if (values.sendEmailCopy && values.email) {
      try {
        const existing = JSON.parse(localStorage.getItem('emailOrders') || '[]')
        const newEntry = {
          email: values.email,
          message: orderMessage,
          timestamp: now,
        }
        localStorage.setItem('emailOrders', JSON.stringify([...existing, newEntry]))
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email –≤ localStorage:', error)
      }
    }

      dispatch(removeManyByIndexes(selectedIndexes))
      navigate('/')
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:', error)
    }
  }

  return (
    <div className="page-content">
      <BackButton />
      <h1>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>

      <Form form={form} layout="vertical" onFinish={handleSubmit}>
        <Form.Item name="phone" label="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞">
          <Input placeholder="+7..." />
        </Form.Item>

        <Form.Item
          name="telegram"
          label="* –ù–∏–∫–Ω–µ–π–º –≤ Telegram"
          rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ Telegram (@username)' }]}
        >
          <Input placeholder="@username" />
        </Form.Item>

        <Form.Item name="comment" label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π">
          <Input.TextArea placeholder="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" />
        </Form.Item>

        <Form.Item label="–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è">
          <Radio.Group
            onChange={(e) => setMethod(e.target.value)}
            value={method}
          >
            <Radio value="pickup">–°–∞–º–æ–≤—ã–≤–æ–∑</Radio>
            <Radio value="delivery">–î–æ—Å—Ç–∞–≤–∫–∞</Radio>
          </Radio.Group>
        </Form.Item>

        {method === 'delivery' ? (
          <Form.Item
            name="address"
            label="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
            rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏' }]}
          >
            <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å" />
          </Form.Item>
        ) : (
          <Form.Item label="–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞">
            <Input disabled value="–ú—ã –ø–æ–∑–∂–µ —Å—é–¥–∞ –¥–æ–±–∞–≤–∏–º" />
          </Form.Item>
        )}

        {/* —ç—Ç–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ */}
        {/* <Form.Item name="sendCopy" valuePropName="checked">
          <Checkbox>–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ø–∏—é —Å–µ–±–µ –≤ Telegram</Checkbox>
        </Form.Item>

        <Form.Item name="sendEmailCopy" valuePropName="checked">
          <Checkbox>–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ø–∏—é —Å–µ–±–µ –Ω–∞ Email</Checkbox>
        </Form.Item> */}

        {/* —ç—Ç–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ */}
        <Form.Item>
          <div style={{ display: 'flex', flexWrap: 'wrap', gap: '1.5rem' }}>
            <Form.Item name="sendCopy" valuePropName="checked" noStyle>
              <Checkbox>–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ø–∏—é –≤ Telegram</Checkbox>
            </Form.Item>

            <Form.Item name="sendEmailCopy" valuePropName="checked" noStyle>
              <Checkbox>–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ø–∏—é –Ω–∞ Email</Checkbox>
            </Form.Item>
          </div>
        </Form.Item>

        {sendEmailCopy && (
          <Form.Item
            name="email"
            label="Email"
            rules={[
              { required: true, message: '–í–≤–µ–¥–∏—Ç–µ Email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ø–∏–∏' },
              { type: 'email', message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Email' },
            ]}
          >
            <Input placeholder="example@mail.com" />
          </Form.Item>
        )}

        <Form.Item
          name="agreement"
          valuePropName="checked"
          rules={[
            {
              validator: (_, value) =>
                value
                  ? Promise.resolve()
                  : Promise.reject(new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ')),
            },
          ]}
        >
          <Checkbox>
            –Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å{' '}
            <a href="/privacy-policy" target="_blank" rel="noopener noreferrer">
              –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            </a>
          </Checkbox>
        </Form.Item>

        <Button type="primary" htmlType="submit" disabled={!agreementAccepted}>
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
        </Button>
      </Form>
    </div>
  )
}

export default CheckoutPage
